diff -uarN system/core/init/init.cpp system/core/init/init.cpp
--- system/core/init/init.cpp	2019-12-13 19:36:16.515296000 +0700
+++ system/core/init/init.cpp	2019-12-13 19:22:19.435728422 +0700
@@ -85,7 +85,9 @@
 std::string console_name = "/dev/console";
 static time_t process_needs_restart;
 
-const char *ENV[32];
+// xen0n: some MTK services (e.g. ril-daemon-mtk) require very large number
+// of sockets, which can't be contained in 32 entries minus other variables.
+const char *ENV[64];
 
 bool waiting_for_exec = false;
 
@@ -440,6 +442,7 @@
     sehandle_prop = selinux_android_prop_context_handle();
 }
 
+#if 0
 enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
 static selinux_enforcing_status selinux_status_from_cmdline() {
@@ -453,6 +456,7 @@
 
     return status;
 }
+#endif
 
 static bool selinux_is_enforcing(void)
 {
@@ -461,7 +461,7 @@
 static bool selinux_is_enforcing(void)
 {
     if (ALLOW_PERMISSIVE_SELINUX) {
-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+        return false; // selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
     return true;
 }
diff -uarN system/core/init/init.h system/core/init/init.h
--- system/core/init/init.h	2019-12-13 19:36:16.515296000 +0700
+++ system/core/init/init.h	2019-12-13 19:22:39.205787395 +0700
@@ -24,7 +24,7 @@
 
 #define COMMAND_RETRY_TIMEOUT 5
 
-extern const char *ENV[32];
+extern const char *ENV[64];
 extern bool waiting_for_exec;
 extern int have_console;
 extern std::string console_name;
diff -uarN system/core/init/service.cpp system/core/init/service.cpp
--- system/core/init/service.cpp	2019-12-13 19:36:16.519295000 +0700
+++ system/core/init/service.cpp	2019-12-13 19:19:29.522058081 +0700
@@ -371,8 +371,10 @@ bool Service::Start() {
             scon = ret_scon;
             free(ret_scon);
         }
+#if 0
         if (rc == 0 && scon == mycon)
             ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
+#endif
         free(mycon);
         free(fcon);
         if (rc < 0) {
diff -uarN system/core/libcutils/fs_config.c system/core/libcutils/fs_config.c
--- system/core/libcutils/fs_config.c	2019-12-14 16:08:48.648122294 +0700
+++ system/core/libcutils/fs_config.c	2019-12-14 16:07:34.790888000 +0700
@@ -143,7 +143,8 @@
     { 00700, AID_SYSTEM,    AID_SHELL,     CAP_MASK_LONG(CAP_BLOCK_SUSPEND), "system/bin/inputflinger" },
 
     /* Support FIFO scheduling mode in SurfaceFlinger. */
-    { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
+    /* Disabled for now as this caused LD_PRELOAD and LD_SHIM_LIBS to be sanitized in linker */
+    // { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
 
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/uncrypt" },
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/install-recovery.sh" },
diff -uarN system/core/rootdir/init.usb.rc system/core/rootdir/init.usb.rc
--- system/core/rootdir/init.usb.rc	2019-12-12 18:50:08.418624000 +0700
+++ system/core/rootdir/init.usb.rc	2019-12-13 19:25:42.609271373 +0700
@@ -15,7 +15,7 @@
 service adbd /sbin/adbd --root_seclabel=u:r:su:s0
     class core
     socket adbd stream 660 system system
-    disabled
+    #disabled
     seclabel u:r:adbd:s0
 
 # adbd on at boot in emulator
